#!/bin/bash

# Global variable
projectDirectory=""

# Global variable for first app
firstApp="True"

# Check if the project name is provided
projectName() {
    project_name="$1"

    if [ -z "$project_name" ]; then
        echo "Usage: $0 <project_name>"
        exit 1
    fi
}

# Function to check if Python is installed
checkPython() {
    if command -v python3 &> /dev/null; then
        echo "Python is installed. Proceeding with the script."
    else
        echo "Error: Python is not installed. Please install Python and run the script again."
        exit 1
    fi
}

# Function to install pipenv
installPipenv() {
    if command -v pipenv &> /dev/null; then
        echo "pipenv is installed. Proceeding with the script."
    else
        echo "pipenv is not installed. Attempting to install with sudo..."

        if command -v sudo &> /dev/null; then
            sudo apt install pipenv
        else
            echo "Error: sudo command not found. Please install pipenv manually."
            exit 1
        fi

        if [ $? -eq 0 ]; then
            echo "pipenv installed successfully. Proceeding with the script."
        else
            echo "Error: Failed to install pipenv. Please install pipenv manually."
            exit 1
        fi
    fi
}

# Install Package with pipenv
installPackage() {
    if [ -z "$1" ]; then
        echo "Usage: installPackage <package_name>"
        return 1
    fi

    # Install the package using pipenv
    echo "Installing $1"
    if ! pipenv install "$1"; then
        echo "Error: Failed to install $1"
        return 1
    fi
    echo "Done installing $1"
}

# Function to create Django project
createDjangoProject() {
    
    # Create and change to the project directory
    mkdir "$project_name" || exit 1
    cd "$project_name" || exit 1

    # Project Directory
    projectDirectory=$(pwd)

    # Use command substitution to get the Python version without extra information
    python_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:2])))')
    echo "Using Python version: $python_version"

    # Set up a virtual environment using pipenv
    pipenv --python ${python_version}

    # Installing django
    installPackage django

    # Create a Django project within the virtual environment using pipenv run
    pipenv run django-admin startproject "$project_name" .
}

# Function to create views for an app
createView() {
    if [ -z "$1" ]; then
        echo "Usage: createView <appName>"
        return 1
    fi

    appName=$1
    viewsFile="${appName}/views.py"

    declare -a viewStringArray=("from django.http import HttpResponse"
                                ""
                                ""
                                "def ${appName}index(request):"
                                "    return HttpResponse('Hello, index page for app ${appName} is ready.')")

    for val in "${viewStringArray[@]}"; do
        echo "$val" >> "$viewsFile"
    done
    echo "View created for $appName"
}

# Function to create URLs for an app
createUrl() {
    if [ -z "$1" ]; then
        echo "Usage: createUrl <appName>"
        return 1
    fi

    appName=$1
    urlFile="${appName}/urls.py"

    declare -a urlStringArray=("from django.urls import path"
                               "from .views import *"
                               ""
                               ""
                               "urlpatterns = ["
                               "    path('', ${appName}index, name='${appName}index'),"
                               "]")

    for val in "${urlStringArray[@]}"; do
        echo "$val" >> "$urlFile"
    done
    echo "URL file created for $appName"
}

# Function to update project URLs
updateProjectUrl() {
    if [ -z "$1" ]; then
        echo "Usage: updtPrjUrl <appName>"
        return 1
    fi

    appName=$1
    prjUrlFile="${projectDirectory}/${project_name}/urls.py"

    # Check if the project directory and urls.py file exist
    if [ ! -d "$project_name" ] || [ ! -f "$prjUrlFile" ]; then
        echo "Error: Project directory or urls.py file not found."
        return 1
    fi

    if [ "$firstApp" = "True" ]; then

        appendImportText=", include"
        ImportLineNumber=18
        sed -i "${ImportLineNumber}s/$/${appendImportText}/" "$prjUrlFile"

        addUrlText="\tpath('', include('${appName}.urls')),"
        urlLineNumber=21
        sed -i "${urlLineNumber}i\\${addUrlText}" "$prjUrlFile"

        firstApp="False"

    else
        addUrlText="\tpath('${appName}/', include('${appName}.urls')),"
        urlLineNumber=21
        sed -i "${urlLineNumber}i\\${addUrlText}" "$prjUrlFile"

        return 1
    fi

    echo "URL updated for $appName in project $project_name"
}

# Function to update project settings
updateProjectSetting() {
    
    appName="$1"
    prjStngFile="${projectDirectory}/${project_name}/settings.py"

    addAppText="\t'${appName}',"
    ImportLineNumber=34

    sed -i "${ImportLineNumber}i\\${addAppText}" "$prjStngFile"
}

# Function to create Django apps
createDjangoApps() {
    # Declare an empty array
    declare -a AppStringArray=()

    # Get input from the user
    echo "Enter a list of Apps separated by space"
    read -a AppStringArray

    # Print the array
    for appVal in "${AppStringArray[@]}"; do
        echo "$appVal app is being created."
        pipenv run django-admin startapp $appVal
        echo "$appVal app had been created."
        createView $appVal
        createUrl $appVal
        updateProjectUrl $appVal
        updateProjectSetting $appVal
    done
}

# Function to add fake data with django-seed and Psycopg2
addSeedFaker(){
    #install django seed and psycopg2
    # Array of libraries
    declare -a SeedPkgStringArray=("django-seed" "psycopg2-binary")

    # Iterate through the packages and install
    for val in "${SeedPkgStringArray[@]}"; do
        echo "Installing $val"

        installPackage $val

        echo "Done installing $val"
    done

    updateProjectSetting django_seed

}

# Function to add support for Schema Graph
addSchemaGraph() {
    # Install package
    installPackage django-schema-graph

    # Update project setting for schema_graph
    updateProjectSetting schema_graph

    # Define paths
    projectDirectory="${PWD}"
    prjUrlFileForSchema="${projectDirectory}/${project_name}/urls.py"

    # Add import statement for Schema in urls.py
    sed -i "/import path, include/ a from schema_graph.views import Schema" "$prjUrlFileForSchema"
    echo "Import statement added in $prjUrlFileForSchema"

    # Add URL pattern for Schema view
    addUrlText="\tpath('schema/', Schema.as_view()),"
    urlLineNumber=$(awk '/path\(/ && /schema\//' "$prjUrlFileForSchema" | sed -n 's/:.*//p')
    
    if [ -z "$urlLineNumber" ]; then
        echo "Error: Unable to find line number for URL pattern in $prjUrlFileForSchema"
        return 1
    fi
    
    if grep -q "Schema.as_view()" "$prjUrlFileForSchema"; then
        echo "URL pattern already exists in $prjUrlFileForSchema"
    else
    sed -i "/urlpatterns = [/ a from schema_graph.views import Schema" "$prjUrlFileForSchema"
        sed -i "${urlLineNumber}i\\${addUrlText}" "$prjUrlFileForSchema"
        echo "URL pattern added in $prjUrlFileForSchema"
    fi

    echo "Schema URL updated for project $project_name"
}


# Function to activate the virtual environment and run the server
activateAndRunServer() {

    pipenv run python manage.py makemigrations

    pipenv run python manage.py migrate

    pipenv run python manage.py createsuperuser

    pipenv run python manage.py runserver
}

# Main script

# Check if Project name is provided
projectName "$1"

# Check if Python is installed
checkPython

# Install pipenv
installPipenv

# Create Django project
createDjangoProject "$1"

# Create Django apps
createDjangoApps

# django seed faker
addSeedFaker

# Schema Graph
addSchemaGraph

# Activate the virtual environment and run the server
activateAndRunServer