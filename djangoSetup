#!/bin/bash

# Global variable
project_directory=""

# Check if the project name is provided
projectName() {
    project_name="$1"

    if [ -z "$project_name" ]; then
        echo "Usage: $0 <project_name>"
        exit 1
    fi
}

# Function to check if Python is installed
checkPython() {
    if command -v python3 &> /dev/null; then
        echo "Python is installed. Proceeding with the script."
    else
        echo "Error: Python is not installed. Please install Python and run the script again."
        exit 1
    fi
}

# Function to check the package manager
checkPackageManager() {
    if command -v apt-get &> /dev/null; then
        echo "apt"
    elif command -v yum &> /dev/null; then
        echo "yum"
    elif command -v pacman &> /dev/null; then
        echo "pacman"
    elif command -v brew &> /dev/null; then
        echo "homebrew"
    else
        echo "Unsupported package manager. Please install packages manually."
        exit 1
    fi
}

# Function to check and install a package using the appropriate package manager
installPackage() {
    package_manager=$(checkPackageManager)

    if ! command -v $1 &> /dev/null; then
        echo "$1 is not installed. Installing $1..."

        case $package_manager in
            "apt")
                sudo apt-get install -y $1
                ;;
            "yum")
                sudo yum install -y $1
                ;;
            "pacman")
                sudo pacman -S --noconfirm $1
                ;;
            "homebrew")
                brew install $1
                ;;
            *)
                echo "Unsupported package manager. Please install $1 manually."
                exit 1
                ;;
        esac

        if [ $? -eq 0 ]; then
            echo "$1 installed successfully."
        else
            echo "Error: Failed to install $1. Please install $1 manually."
            exit 1
        fi
    else
        echo "$1 is already installed."
    fi
}

# Function to check and install pip if not already installed
installPip() {
    installPackage "python3-pip"
}

# Function to check and install pipenv if not already installed
installPipenv() {
    installPackage "pipenv"
}

# Function to create Django project
createDjangoProject() {
    
    # Create and change to the project directory
    mkdir "$project_name" || exit 1
    cd "$project_name" || exit 1

    # Project Directory
    project_directory=$(pwd)

    # Use command substitution to get the Python version without extra information
    python_version=$(python3 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))')
    echo "Using Python version: $python_version"

    # Set up a virtual environment using pipenv
    pipenv --python "$python_version"

    # Array of Packages
    declare -a pkg_string_array=("Django")

    # Iterate through the packages and install
    for val in "${pkg_string_array[@]}"; do
        echo "Installing $val"
        pipenv run pipenv install $val
        echo "Done installing $val"
    done

    # Create a Django project within the virtual environment using pipenv run
    pipenv run django-admin startproject "$project_name" .
}

# Function to create views for an app
createAppView() {
    if [ -z "$1" ]; then
        echo "Usage: create_view <app_name>"
        return 1
    fi

    app_name=$1
    views_file="${app_name}/views.py"

    declare -a view_string_array=("from django.http import HttpResponse"
                                ""
                                ""
                                "def ${app_name}index(request):"
                                "    return HttpResponse('Hello, index page for app ${app_name} is ready.')")

    for val in "${view_string_array[@]}"; do
        echo "$val" >> "$views_file"
    done
    echo "View created for $app_name"
}

# Function to create URLs for an app
createAppUrl() {
    if [ -z "$1" ]; then
        echo "Usage: create_url <app_name>"
        return 1
    fi

    app_name=$1
    url_file="${app_name}/urls.py"

    declare -a url_string_array=("from django.urls import path"
                               "from .views import *"
                               ""
                               ""
                               "urlpatterns = ["
                               "    path('', ${app_name}index, name='${app_name}index'),"
                               "]")

    for val in "${url_string_array[@]}"; do
        echo "$val" >> "$url_file"
    done
    echo "URL file created for $app_name"
}

# Function to update project URLs
updateProjectUrl() {
    if [ -z "$1" ]; then
        echo "Usage: update_project_url <app_name>"
        return 1
    fi

    app_name=$1
    prj_url_file="${project_directory}/${project_name}/urls.py"

    # Check if the project directory and urls.py file exist
    if [ ! -d "$project_name" ] || [ ! -f "$prj_url_file" ]; then
        echo "Error: Project directory or urls.py file not found."
        return 1
    fi

    append_import_text=", include"
    import_line_number=18
    sed -i "${import_line_number}s/$/${append_import_text}/" "$prj_url_file"

    add_url_text="\tpath('', include('${app_name}.urls')),"
    url_line_number=21
    sed -i "${url_line_number}i\\${add_url_text}" "$prj_url_file"

    echo "URL updated for $app_name in project $project_name"
}

# Function to update project settings
updateProjectSetting() {
    
    app_name="$1"
    prj_stng_file="${project_directory}/${project_name}/settings.py"

    add_app_text="\t'${app_name}',"
    import_line_number=34

    sed -i "${import_line_number}i\\${add_app_text}" "$prj_stng_file"
}

# Function to create Django apps
createDjangoApps() {
    # Declare an empty array
    declare -a app_string_array=()

    # Get input from the user
    read -p "Enter a list of Apps separated by space: " -a app_string_array

    # Print the array
    for app_val in "${app_string_array[@]}"; do
        echo "$app_val app is being created."
        pipenv run django-admin startapp $app_val
        echo "$app_val app had been created."
        createAppView $app_val
        createAppUrl $app_val
        updateProjectUrl $app_val
        updateProjectSetting $app_val
    done
}

# Function to activate the virtual environment and run the server
activateAndRunServer() {

    # Create directory tree
    tree > tree.txt
    # Activate the virtual environment
    pipenv run python manage.py runserver
}

# Main script

# Check if Project name is provided
projectName "$1"

# Check if Python is installed
checkPython

# Call the function to check and install pip
installPip

# Call the function to check and install pipenv
installPipenv

# Create Django project
createDjangoProject "$1"

# Create Django apps
createDjangoApps

# Activate the virtual environment and run the server
activateAndRunServer